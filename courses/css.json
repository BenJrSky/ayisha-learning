{
  "id": "course_css_mastery",
  "slug": "css-from-zero-to-pro",
  "title": "CSS — From Zero to Professional",
  "subtitle": "Learn modern CSS from first principles to advanced, production-grade techniques.",
  "category": "Development",
  "level": "Beginner to Advanced",
  "hours": 28,
  "language": "en",
  "lastUpdated": "2025-08-20",
  "tags": ["CSS", "Box Model", "Flexbox", "Grid", "Responsive"],

  "hero": {
    "image": "images/img_1.jpg",
    "logo": "ayisha-logo-black.png",
    "ctaText": "Enroll Now",
    "ctaUrl": "enroll.html"
  },

  "overview": "Master CSS step by step. Start with how CSS works, selectors and the cascade, then build solid layouts with the box model, Flexbox and Grid. Learn modern typography and color techniques, responsive design with media and container queries, custom properties, nesting, cascade layers, advanced selectors like :has(), and production performance and accessibility best practices. You’ll finish with a solid mental model and a toolbox to ship scalable, maintainable CSS.",
  "content": "This course is project-oriented and explanation-heavy. Each lesson combines clear theory, small focused code snippets, and practical tips. Quizzes reinforce concepts from beginner to pro-level, ensuring you understand not just the how, but the why behind CSS decisions.",
  "prerequisites": ["Basic HTML knowledge (elements, attributes)", "Optional: basic understanding of the browser devtools"],
  "outcomes": [
    "Confidently write maintainable CSS with a strong grasp of the cascade, specificity and inheritance",
    "Build responsive layouts with Flexbox and Grid using modern units and techniques",
    "Craft accessible, readable interfaces with robust typography and color systems",
    "Adopt modern CSS features: custom properties, container queries, nesting, cascade layers, and :has()",
    "Optimize for performance and respect user preferences (reduced motion, dark mode)"
  ],

  "pricing": { "free": true, "price": 0, "currency": "EUR" },

  "instructor": {
    "name": "Ayisha Team",
    "avatar": "images/img_3.jpg",
    "bio": "Frontend engineers and accessibility advocates.",
    "links": [
      { "type": "site", "url": "https://example.com" }
    ]
  },

  "lessons": [
    {
      "id": "l0",
      "slug": "css-fundamentals",
      "order": 0,
      "title": "CSS Fundamentals",
      "minutes": 40,
      "summary": "What CSS is, how it connects to HTML, rule syntax, basic selectors, and a first look at the cascade.",
      "content": [
        { "type": "text", "value": "CSS (Cascading Style Sheets) controls presentation. Keep structure (HTML) separate from style (CSS) to improve reuse, accessibility, and maintainability. You usually link an external stylesheet from your HTML for caching and portability." },
        { "type": "code", "language": "html", "value": "<!-- index.html -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n<h1 class=\"title\">Hello CSS</h1>" },
        { "type": "tip", "value": "Prefer external stylesheets over inline styles to benefit from caching and clearer separation of concerns." },

        { "type": "text", "value": "The basic CSS rule shape is: selector { property: value; }. The selector targets elements; declarations set styles. Properties accept specific value types (keywords, lengths, colors)." },
        { "type": "code", "language": "css", "value": "/* styles.css */\nh1.title { color: #111827; font-size: 2rem; }" },
        { "type": "tip", "value": "Keep one declaration per line and group related rules to improve readability and diffs." },

        { "type": "text", "value": "Core selectors: type (h1), class (.btn), id (#header). Prefer classes for styling because they scale and avoid specificity traps that ids can create." },
        { "type": "code", "language": "css", "value": "button.btn { background: #111827; color: white; }\n#header { padding: 1rem; } /* Use sparingly */" },
        { "type": "tip", "value": "Prefer classes for styling. Use ids for unique anchors or JS hooks only when necessary." },

        { "type": "text", "value": "Attribute selectors and pseudo-classes target states and attributes. :hover and :focus-visible improve interaction and accessibility; prefer the latter for keyboard users." },
        { "type": "code", "language": "css", "value": "input[type=\"email\"] { border: 1px solid #cbd5e1; }\nbutton:hover { filter: brightness(1.05); }\nbutton:focus-visible { outline: 2px solid #2563eb; outline-offset: 2px; }" },
        { "type": "tip", "value": "Use :focus-visible (not :focus) so mouse users aren’t shown outlines unnecessarily, while keyboard users still get a visible focus indicator." },

        { "type": "text", "value": "The cascade decides which rule wins using: importance (!important), origin (user/author/UA), specificity, and source order. Understanding this prevents surprises." },
        { "type": "code", "language": "css", "value": "p { color: #111; }\n.article p { color: #334155; }\n.article p.important { color: #000 !important; }" },
        { "type": "tip", "value": "Avoid !important when possible. Favor good structure, lower specificity, and consistent layering to control priority." }
      ],
      "examples": [
        { "description": "Linking a stylesheet and styling a heading.", "code": "<link rel=\"stylesheet\" href=\"styles.css\">\n<h1 class=\"title\">Hello</h1>\n/* styles.css */\n.title{color:#111827;font-size:2rem}" },
        { "description": "Basic selectors: type, class, id.", "code": "h2{margin:0}\n.note{background:#fef3c7}\n#footer{padding:1rem}" },
        { "description": "Pseudo-classes for accessibility.", "code": "button:focus-visible{outline:2px solid #2563eb;outline-offset:2px}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "What does CSS primarily control?", "options": ["Data structure", "Presentation/visual style", "Server behavior"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which selector type is generally best for scalable styling?", "options": ["Type selector", "Class selector", "ID selector"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Which factor is evaluated last in the cascade if all else ties?", "options": ["Specificity", "Importance", "Source order"], "answer": 2 },
        { "id": "q4", "type": "single", "prompt": "Which pseudo-class should you prefer for keyboard focus states?", "options": [":focus", ":focus-visible", ":hover"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "Where should you typically put your CSS for maintainability?", "options": ["Inline styles", "External stylesheet", "In the HTML head as style blocks only"], "answer": 1 }
      ]
    },

    {
      "id": "l1",
      "slug": "box-model-and-units",
      "order": 1,
      "title": "Box Model and Units",
      "minutes": 45,
      "summary": "Understand content, padding, border, margin, box-sizing, margin collapsing, and modern units.",
      "content": [
        { "type": "text", "value": "Every element is a rectangular box. The box model consists of content, padding, border, and margin. Mastering it is key to predictable spacing and sizing." },
        { "type": "code", "language": "css", "value": ".card { padding: 1rem; border: 2px solid #eab308; margin: 1rem 0; }" },
        { "type": "tip", "value": "Sketch boxes when debugging layout. Visualizing padding/border/margin quickly reveals spacing issues." },

        { "type": "text", "value": "box-sizing: border-box makes width/height include padding and border, simplifying layout math and preventing overflow." },
        { "type": "code", "language": "css", "value": "*,*::before,*::after{box-sizing:border-box}\n.card{width:300px;padding:1rem;border:2px solid #eab308}" },
        { "type": "tip", "value": "Set border-box globally to reduce surprises and simplify components across the app." },

        { "type": "text", "value": "Adjacent vertical margins can collapse. This means the larger margin wins instead of adding up. Understanding this avoids unexpected gaps." },
        { "type": "code", "language": "css", "value": "h1{margin:1rem 0}\nh2{margin:.5rem 0} /* The vertical margin between may collapse to 1rem */" },
        { "type": "tip", "value": "Use padding on containers (not margin) to create internal spacing that doesn’t collapse with child margins." },

        { "type": "text", "value": "Use the right unit for the job. rem for global typography, em for component-relative spacing, % for fluid containers, ch for character-based measures, and modern viewport units like svh/lvh for mobile viewports." },
        { "type": "code", "language": "css", "value": "html{font-size:100%}\nh1{font-size:2.25rem}\n.btn{padding:.75em 1em}\n.hero{min-height:100svh}" },
        { "type": "tip", "value": "Prefer relative units (rem/em/%) for accessibility and responsiveness; avoid locking layouts with px everywhere." },

        { "type": "text", "value": "Logical properties adapt to writing modes and locales. Prefer inline/block logical margins/paddings over left/right/top/bottom for internationalized UIs." },
        { "type": "code", "language": "css", "value": ".panel{padding-block:1rem;padding-inline:1.25rem;margin-block:1rem;border-radius:12px}" },
        { "type": "tip", "value": "Use logical properties (margin-inline, padding-block, inset-inline) to support RTL and vertical writing modes effortlessly." }
      ],
      "examples": [
        { "description": "Global border-box reset.", "code": "*,*::before,*::after{box-sizing:border-box}" },
        { "description": "Character-based width for inputs.", "code": "input.code{width:24ch}" },
        { "description": "Logical properties for international UIs.", "code": ".card{padding-block:1rem;padding-inline:1rem}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "What does border-box change about width?", "options": ["Includes only content", "Includes content + padding + border", "Includes content + margin"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which margins can collapse?", "options": ["Horizontal margins", "Vertical adjacent margins", "Margins never collapse"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Which unit scales with the root font size?", "options": ["em", "rem", "px"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "What are logical properties useful for?", "options": ["Animations", "Internationalization and writing modes", "Z-index management"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "A good default for sizing and spacing is to:", "options": ["Use px for all dimensions", "Mix relative units wisely", "Avoid units and use auto everywhere"], "answer": 1 }
      ]
    },

    {
      "id": "l2",
      "slug": "typography-and-colors",
      "order": 2,
      "title": "Typography and Colors",
      "minutes": 45,
      "summary": "Readable type, scalable systems, and modern color spaces for accessible, beautiful interfaces.",
      "content": [
        { "type": "text", "value": "Typography communicates hierarchy and rhythm. Control font-family, size, weight, and line-height to establish clear visual structure and readability." },
        { "type": "code", "language": "css", "value": "body{font-family:system-ui,-apple-system,Segoe UI,Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif;line-height:1.6;color:#111827}" },
        { "type": "tip", "value": "Avoid long line lengths; aim for ~45–75 characters per line for running text." },

        { "type": "text", "value": "Scale type with rem for consistency and accessibility. Define a type scale and reuse it across components for predictable sizing." },
        { "type": "code", "language": "css", "value": "h1{font-size:2.5rem}\nh2{font-size:2rem}\nh3{font-size:1.5rem}\np{font-size:1rem}" },
        { "type": "tip", "value": "Set the root font-size to 100% so rem maps to user preferences and browser defaults." },

        { "type": "text", "value": "Modern color spaces like LCH/Lab offer perceptual uniformity, making gradients and mixed colors look more natural across ranges." },
        { "type": "code", "language": "css", "value": ".accent{color:lch(55% 50 30)}\n.badge{background:color-mix(in lch, orange 60%, white)}" },
        { "type": "tip", "value": "Use color-mix with care; test contrast and gamut clipping across devices." },

        { "type": "text", "value": "Variable fonts compress multiple weights/axes into a single file. They reduce requests and offer fine-grained control with font-variation-settings." },
        { "type": "code", "language": "css", "value": "@font-face{font-family:'InterVar';src:url(Inter.var.woff2) format('woff2');font-display:swap}\n.title{font-family:'InterVar',system-ui;font-variation-settings:'wght' 700}" },
        { "type": "tip", "value": "Always use font-display: swap for perceived performance; load text first, refine with the custom font when ready." },

        { "type": "text", "value": "Accessibility: ensure sufficient contrast and visible focus states. WCAG contrast recommendations help make text readable for more users." },
        { "type": "code", "language": "css", "value": "a{color:#2563eb}\na:focus-visible{outline:2px solid #2563eb;outline-offset:2px}" },
        { "type": "tip", "value": "Test contrast early and often. Don’t rely solely on color to convey meaning; use text or icons as well." }
      ],
      "examples": [
        { "description": "Fluid heading scale with rem.", "code": "h1{font-size:clamp(2rem,4vw,3rem)}" },
        { "description": "Tag with high-contrast badge.", "code": ".tag{background:#111827;color:#f8fafc;border-radius:.5rem;padding:.25em .5em}" },
        { "description": "Variable font in a hero title.", "code": ".hero-title{font-family:'InterVar';font-variation-settings:'wght' 650}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Which unit helps keep type consistent with user preferences?", "options": ["px", "rem", "vh"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Why use LCH/Lab color spaces?", "options": ["They are older and widely deprecated", "They’re perceptually more uniform", "They only work on dark mode"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "What’s a key benefit of variable fonts?", "options": ["Worse performance", "Multiple weights/axes in one file", "They remove the need for fallbacks"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "Minimum practice for readable links and buttons is to:", "options": ["Remove outlines", "Ensure visible focus and contrast", "Use only color without labels"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "font-variation-settings controls:", "options": ["OpenType features only", "Variable font axis values (e.g., weight)", "Line height only"], "answer": 1 }
      ]
    },

    {
      "id": "l3",
      "slug": "flexbox-and-grid-essentials",
      "order": 3,
      "title": "Flexbox and Grid Essentials",
      "minutes": 50,
      "summary": "Build robust one-dimensional and two-dimensional layouts with Flexbox and Grid.",
      "content": [
        { "type": "text", "value": "Flexbox is ideal for one-dimensional layouts (rows or columns). It distributes space along the main axis and supports alignment along the cross axis." },
        { "type": "code", "language": "css", "value": ".row{display:flex;gap:1rem}\n.row>div{flex:1}" },
        { "type": "tip", "value": "Start simple: display:flex on a container, then tune gap, alignment, and flex-basis." },

        { "type": "text", "value": "Control alignment with justify-content (main axis) and align-items (cross axis). Enable wrapping for responsive rows of cards." },
        { "type": "code", "language": "css", "value": ".row{display:flex;flex-wrap:wrap;gap:1rem;justify-content:space-between;align-items:stretch}\n.card{flex:1 1 240px}" },
        { "type": "tip", "value": "Avoid overusing order for semantic rearrangement; DOM order should reflect reading order." },

        { "type": "text", "value": "Grid handles two-dimensional layouts (rows and columns). Define tracks explicitly and place items by line, area, or auto-placement." },
        { "type": "code", "language": "css", "value": ".grid{display:grid;grid-template-columns:repeat(12,1fr);gap:1rem}\n.header{grid-column:1/-1}" },
        { "type": "tip", "value": "Use grid areas and minmax() to create resilient, fluid grids that adapt to container width." },

        { "type": "text", "value": "Create fluid columns with repeat(auto-fit, minmax()). auto-fit collapses empty tracks; minmax ensures a minimum width while staying flexible." },
        { "type": "code", "language": "css", "value": ".gallery{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1rem}" },
        { "type": "tip", "value": "Prefer intrinsic sizing over fixed breakpoints: let content define the minimums, grid fills the rest." },

        { "type": "text", "value": "When to choose Flexbox vs Grid: Flexbox for linear, content-driven distribution; Grid for structured two-axis layouts and page scaffolding." },
        { "type": "code", "language": "css", "value": "/* Flex for nav */\nnav ul{display:flex;gap:1rem}\n/* Grid for page */\n.page{display:grid;grid-template-columns:1fr minmax(0,720px) 1fr}" },
        { "type": "tip", "value": "Mix them: Grid for the macro layout, Flexbox for components within grid cells." }
      ],
      "examples": [
        { "description": "Responsive card row with wrapping.", "code": ".row{display:flex;flex-wrap:wrap;gap:1rem}.card{flex:1 1 240px}" },
        { "description": "12-column grid with full-width header.", "code": ".grid{display:grid;grid-template-columns:repeat(12,1fr)}.header{grid-column:1/-1}" },
        { "description": "Gallery with auto-fit/minmax.", "code": ".gallery{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1rem}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Flexbox is best for:", "options": ["Two-dimensional page grids", "One-dimensional row/column layouts", "SVG filters"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which property enables Grid?", "options": ["display: flex", "display: grid", "grid-auto-flow: column"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "What does minmax(200px, 1fr) do?", "options": ["Fixes items at 200px", "Allows items to be at least 200px and grow to 1fr", "Sets items to auto height"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "What does auto-fit do in repeat()?", "options": ["Hides grid areas", "Collapses empty tracks to fit available space", "Forces fixed columns"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "When should you prefer Grid over Flexbox?", "options": ["For axis-aligned two-dimensional layouts", "For simple horizontal nav bars", "Never"], "answer": 0 }
      ]
    },

    {
      "id": "l4",
      "slug": "responsive-design-media-and-container-queries",
      "order": 4,
      "title": "Responsive Design with Media and Container Queries",
      "minutes": 50,
      "summary": "Design mobile-first, use media queries for environment, and container queries for component-adaptive UI.",
      "content": [
        { "type": "text", "value": "Mobile-first means starting with a solid small-screen experience, then progressively enhancing layouts and features for larger screens." },
        { "type": "code", "language": "css", "value": ".container{padding:1rem}\n@media (min-width: 640px){.container{padding:1.5rem}}" },
        { "type": "tip", "value": "Avoid rigid desktop-first breakpoints. Let content and components guide where layout needs to adapt." },

        { "type": "text", "value": "Media queries condition styles on viewport or user preferences. Common queries target width, color scheme, and reduced motion preferences." },
        { "type": "code", "language": "css", "value": "@media (prefers-color-scheme: dark){:root{--bg:#0b0f19;--fg:#e5e7eb}body{background:var(--bg);color:var(--fg)}}" },
        { "type": "tip", "value": "Respect user preferences (dark mode, reduced motion). It improves comfort and accessibility." },

        { "type": "text", "value": "Container queries style components based on the size of their container, not the viewport. This enables truly reusable, context-aware components." },
        { "type": "code", "language": "css", "value": ".card-grid{container-type:inline-size}\n@container (min-width: 600px){.card{display:grid;grid-template-columns:1fr 2fr;gap:1rem}}" },
        { "type": "tip", "value": "Add container-type on the component’s parent you want to query. Then write @container rules like you do with @media." },

        { "type": "text", "value": "Use modern viewport units (svh/lvh) for mobile browsers with dynamic toolbars. This avoids layout jumps when the UI chrome shows/hides." },
        { "type": "code", "language": "css", "value": ".hero{min-height:100svh;display:grid;place-items:center}" },
        { "type": "tip", "value": "Prefer svh/lvh/dvh over vh when building full-height sections on mobile." },

        { "type": "text", "value": "Responsive images and fluid type improve performance and readability. Use image-set for DPR-aware images and clamp() for type scales." },
        { "type": "code", "language": "css", "value": ".cover{background-image:image-set(url(hero@1x.jpg) 1x, url(hero@2x.jpg) 2x)}\nh1{font-size:clamp(1.75rem,4vw,3rem)}" },
        { "type": "tip", "value": "Ship the smallest useful assets; let the browser pick higher-resolution resources only when needed." }
      ],
      "examples": [
        { "description": "Dark mode via prefers-color-scheme.", "code": "@media (prefers-color-scheme: dark){body{background:#0b0f19;color:#e5e7eb}}" },
        { "description": "Container query for a sidebar layout.", "code": ".sidebar{container-type:inline-size}\n@container (min-width: 500px){.sidebar{display:grid;grid-template-columns:240px 1fr;gap:1rem}}" },
        { "description": "Full-height hero that resists mobile toolbar jumps.", "code": ".hero{min-height:100svh}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Mobile-first means:", "options": ["Design for desktop first", "Start from small screens and progressively enhance", "Ignore tablets"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which query targets user color theme preference?", "options": ["prefers-reduced-motion", "prefers-color-scheme", "color-gamut"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Container queries depend on:", "options": ["Viewport size", "Container size", "User agent string"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "svh/lvh units help with:", "options": ["Legacy IE support", "Dynamic mobile viewport heights", "Color contrast"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "For responsive images, image-set helps by:", "options": ["Choosing images by density/pixel ratio", "Inlining SVGs automatically", "Preloading all images"], "answer": 0 }
      ]
    },

    {
      "id": "l5",
      "slug": "modern-css-variables-nesting-layers-has-animations",
      "order": 5,
      "title": "Modern CSS: Variables, Nesting, Layers, :has(), and Animations",
      "minutes": 55,
      "summary": "Write scalable, maintainable CSS with custom properties, cascade layers, nesting, advanced selectors, and accessible motion.",
      "content": [
        { "type": "text", "value": "Custom properties (CSS variables) enable theming and reuse. They’re dynamic and participate in the cascade, so scope them wisely." },
        { "type": "code", "language": "css", "value": ":root{--brand:#eab308;--gap:1rem}\n.btn{background:var(--brand);padding:var(--gap)}\n.card{color:var(--fg,#111827)}" },
        { "type": "tip", "value": "Use variables for tokens (colors, spacing, radii). Provide fallbacks with var(--token, fallback)." },

        { "type": "text", "value": "Cascade layers (@layer) let you explicitly define priority buckets. They reduce specificity battles by making order intentional and predictable." },
        { "type": "code", "language": "css", "value": "@layer reset, base, components, utilities;\n@layer reset{*,*::before,*::after{box-sizing:border-box}}\n@layer base{body{font:16px/1.6 system-ui;color:#111827}}\n@layer components{.btn{padding:.75em 1em;border-radius:.5rem}}\n@layer utilities{.text-center{text-align:center}}" },
        { "type": "tip", "value": "Declare layers up front and group rules logically. Lower layers should set defaults; higher layers safely override." },

        { "type": "text", "value": "Nesting reduces repetition by letting you nest selectors inside a rule. Use it to keep related styles close and readable." },
        { "type": "code", "language": "css", "value": ".card{\n  padding:1rem;border-radius:.75rem;background:#fff\n  & .title{font-weight:700}\n  &:hover{box-shadow:0 6px 20px rgba(0,0,0,.08)}\n}" },
        { "type": "tip", "value": "Don’t over-nest. Keep selector depth shallow to avoid specificity creep and ensure maintainability." },

        { "type": "text", "value": ":is() and :where() simplify complex selectors; :has() is a parent-aware selector that unlocks patterns like styling a parent based on its children." },
        { "type": "code", "language": "css", "value": "article:is(.post,.news){padding:1rem}\nnav :where(a){text-decoration:none}\n.card:has(img){display:grid;grid-template-columns:120px 1fr;gap:1rem}" },
        { "type": "tip", "value": "Use :where() for zero-specificity grouping, :is() when you want specificity from the most specific selector inside." },

        { "type": "text", "value": "Transitions and keyframe animations should favor transform and opacity for performance. Respect prefers-reduced-motion to avoid discomfort." },
        { "type": "code", "language": "css", "value": ".btn{transition:transform .15s ease, background-color .2s ease}\n.btn:hover{transform:translateY(-2px)}\n@keyframes fadeIn{from{opacity:0}to{opacity:1}}\n@media (prefers-reduced-motion: reduce){*{animation:none;transition:none}}" },
        { "type": "tip", "value": "Animate only what’s necessary. Measure impact with DevTools; avoid layout-thrashing properties like width/left if possible." }
      ],
      "examples": [
        { "description": "Theme switch via custom properties.", "code": ":root{--bg:#ffffff;--fg:#111827}\n@media (prefers-color-scheme: dark){:root{--bg:#0b0f19;--fg:#e5e7eb}}\nbody{background:var(--bg);color:var(--fg)}" },
        { "description": "Layering utilities above components.", "code": "@layer components, utilities;@layer components{.btn{background:#111827;color:#fff}}@layer utilities{.text-center{text-align:center}}" },
        { "description": "Parent styling with :has()", "code": ".field:has(input:invalid){outline:2px solid #ef4444;outline-offset:2px}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Custom properties are resolved:", "options": ["At build time", "At runtime and follow the cascade", "Only once per page"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which feature organizes CSS into priority buckets?", "options": ["@supports", "@layer", "@font-face"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Which selector enables parent-aware styling?", "options": [":is()", ":where()", ":has()"], "answer": 2 },
        { "id": "q4", "type": "single", "prompt": "Which properties are cheaper to animate?", "options": ["width/left", "transform/opacity", "height/top"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "Nesting should be used:", "options": ["Deeply for all selectors", "Sparingly with shallow depth", "Never in modern CSS"], "answer": 1 }
      ]
    },
    {
      "id": "l6",
      "slug": "spacing-margin-padding-gap",
      "order": 6,
      "title": "Spacing Systems: Margin, Padding, and Gap",
      "minutes": 45,
      "summary": "Master internal vs external spacing, margin collapsing, and modern gap for Flex and Grid.",
      "content": [
        { "type": "text", "value": "Spacing is communication. Padding creates internal breathing room inside a component; margin creates external space around it. Gap distributes space between children in Flex and Grid without side effects on the first/last child." },
        { "type": "code", "language": "css", "value": ".card{padding:1rem;border:1px solid #e5e7eb;border-radius:.5rem}\n.stack>*{margin-block:0}\n.stack>*+*{margin-block-start:1rem}\n.row{display:flex;gap:1rem}" },
        { "type": "tip", "value": "Use gap whenever possible for layout spacing; it avoids collapsing margins and is symmetrical by design." },

        { "type": "text", "value": "Margin collapsing occurs between adjacent block-level elements' vertical margins. The resulting gap equals the largest margin, not the sum. This can surprise newcomers." },
        { "type": "code", "language": "css", "value": "h1{margin-block:1rem}\nh2{margin-block:.5rem} /* The vertical space between can collapse to 1rem */" },
        { "type": "tip", "value": "Use padding on containers to create consistent internal spacing that does not collapse with children." },

        { "type": "text", "value": "Logical properties help internationalization. Prefer padding-block, margin-inline, and block/inline shorthands over top/right/bottom/left." },
        { "type": "code", "language": "css", "value": ".panel{padding-inline:1rem;padding-block:1.25rem;margin-block:1rem}" },
        { "type": "tip", "value": "Logical spacing reads like text: block = vertical flow; inline = reading direction. It adapts automatically to RTL and vertical writing modes." },

        { "type": "text", "value": "Establish a spacing scale to stay consistent across the UI. A simple 4/8px base scale (0.25/0.5rem steps) keeps rhythm and reduces one-off values." },
        { "type": "code", "language": "css", "value": ":root{--space-1:.25rem;--space-2:.5rem;--space-3:1rem;--space-4:1.5rem}\n.card{padding:var(--space-3)}\n.row{gap:var(--space-3)}" },
        { "type": "tip", "value": "Document your spacing tokens and stick to them—consistency reduces cognitive load and design drift." },

        { "type": "text", "value": "Use gap in Flex and Grid to separate children without affecting edges. It works with wrapping and complex grid placements, making spacing robust and readable." },
        { "type": "code", "language": "css", "value": ".grid{display:grid;grid-template-columns:repeat(3,1fr);gap:1rem}\n.flex{display:flex;flex-wrap:wrap;gap:.75rem}" },
        { "type": "tip", "value": "Avoid relying on first-child/last-child margin hacks—gap expresses intent better and avoids edge inconsistencies." }
      ],
      "examples": [
        { "description": "Stack layout with consistent vertical spacing.", "code": ".stack>*{margin-block:0}.stack>*+*{margin-block-start:1rem}" },
        { "description": "Flexible row with gap and wrapping.", "code": ".row{display:flex;flex-wrap:wrap;gap:1rem}" },
        { "description": "Spacing tokens with custom properties.", "code": ":root{--space-1:.25rem;--space-2:.5rem;--space-3:1rem}.card{padding:var(--space-3)}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Padding vs margin primarily differ by:", "options": ["Padding is internal; margin is external", "Padding is external; margin is internal", "They are identical"], "answer": 0 },
        { "id": "q2", "type": "single", "prompt": "Margin collapsing applies to:", "options": ["Horizontal margins only", "Adjacent vertical block margins", "Inline elements only"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "gap works with:", "options": ["Flex and Grid", "Only Grid", "Only Flex"], "answer": 0 },
        { "id": "q4", "type": "single", "prompt": "Logical properties help with:", "options": ["Animations", "Internationalization & writing modes", "Z-index"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "A spacing scale (tokens) primarily improves:", "options": ["Bundle size only", "Consistency & readability", "Network security"], "answer": 1 }
      ]
    },
    {
      "id": "l7",
      "slug": "advanced-flexbox",
      "order": 7,
      "title": "Advanced Flexbox Patterns",
      "minutes": 50,
      "summary": "Deep dive into flex shorthand, alignment, wrapping strategies, and common UI patterns.",
      "content": [
        { "type": "text", "value": "The flex shorthand is flex: grow shrink basis. A common pattern is flex: 1 1 240px to let items wrap with a sensible minimum width while growing to fill space." },
        { "type": "code", "language": "css", "value": ".cards{display:flex;flex-wrap:wrap;gap:1rem}\n.card{flex:1 1 240px}" },
        { "type": "tip", "value": "Think of basis as the starting size. Grow and shrink are scaling permissions when space is extra or tight." },

        { "type": "text", "value": "Align along the main axis with justify-content and along the cross axis with align-items. align-content acts on the multi-line container when wrapping occurs." },
        { "type": "code", "language": "css", "value": ".toolbar{display:flex;justify-content:space-between;align-items:center}" },
        { "type": "tip", "value": "Use place-content and place-items as shorthands for pairs of align/justify properties when it improves clarity." },

        { "type": "text", "value": "Use auto margins to push items apart in a row. They absorb free space on the main axis, enabling flexible separators without extra wrappers." },
        { "type": "code", "language": "css", "value": ".nav{display:flex;gap:1rem}\n.nav .spacer{margin-inline-start:auto}" },
        { "type": "tip", "value": "Auto margins are powerful but explicit. Prefer them for singular push/grow behavior; use gap for general spacing." },

        { "type": "text", "value": "Min/max content sizing can interact with flex-basis. Use min-width or a basis to avoid items shrinking too small and breaking content." },
        { "type": "code", "language": "css", "value": ".item{flex:1 1 16rem;min-width:12rem}" },
        { "type": "tip", "value": "Audit content-driven minimums (like long words) and enforce them via min-width to prevent overflow." },

        { "type": "text", "value": "Common patterns: equal-height cards, centered hero, split layouts, and responsive toolbars that wrap gracefully on narrow screens." },
        { "type": "code", "language": "css", "value": ".hero{display:flex;min-height:60svh;align-items:center;justify-content:center}\n.split{display:flex;gap:1rem}\n.split>*{flex:1 1 20rem}" },
        { "type": "tip", "value": "Favor Flexbox for one-dimensional distribution and Grid for structured two-axis compositions." }
      ],
      "examples": [
        { "description": "Responsive card deck with min width.", "code": ".cards{display:flex;flex-wrap:wrap;gap:1rem}.card{flex:1 1 240px;min-width:200px}" },
        { "description": "Toolbar with spacer using auto margin.", "code": ".toolbar{display:flex;gap:1rem}.spacer{margin-inline-start:auto}" },
        { "description": "Centered hero with Flexbox.", "code": ".hero{display:flex;align-items:center;justify-content:center;min-height:60svh}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "In flex: 1 1 240px, 240px represents:", "options": ["grow", "shrink", "basis"], "answer": 2 },
        { "id": "q2", "type": "single", "prompt": "Which property aligns along the cross axis?", "options": ["justify-content", "align-items", "order"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Auto margins on the main axis can:", "options": ["Pull items together", "Absorb free space to push items apart", "Disable wrapping"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "To prevent overly narrow items, prefer:", "options": ["min-width or basis", "z-index", "float"], "answer": 0 },
        { "id": "q5", "type": "single", "prompt": "Flexbox is best suited for:", "options": ["Two-dimensional page grids", "One-dimensional layouts", "SVG filters"], "answer": 1 }
      ]
    },
    {
      "id": "l8",
      "slug": "positioning-and-stacking-context",
      "order": 8,
      "title": "Positioning and Stacking Context Deep Dive",
      "minutes": 50,
      "summary": "Relative, absolute, fixed, sticky positioning; stacking contexts and z-index sanity.",
      "content": [
        { "type": "text", "value": "Positioning modes change how elements are placed. relative offsets without removing from flow; absolute removes from flow and positions against the nearest positioned ancestor." },
        { "type": "code", "language": "css", "value": ".box{position:relative}\n.badge{position:absolute;inset-inline-end:.5rem;inset-block-start:.5rem}" },
        { "type": "tip", "value": "Add position: relative to the parent to anchor absolutely positioned children predictably." },

        { "type": "text", "value": "Fixed elements are pinned to the viewport; sticky toggles between relative and fixed based on scroll thresholds." },
        { "type": "code", "language": "css", "value": "header{position:sticky;top:0;backdrop-filter:blur(8px)}\n.modal{position:fixed;inset:0}" },
        { "type": "tip", "value": "Sticky needs a scrollable ancestor and enough space to stick; test with realistic content heights." },

        { "type": "text", "value": "Stacking contexts group elements for z-index calculations. They are created by positioned elements with z-index, opacity < 1, transform, filter, and other properties." },
        { "type": "code", "language": "css", "value": ".panel{position:relative;z-index:1}\n.overlay{position:fixed;inset:0;z-index:1000}\n.card{transform:translateZ(0)}" },
        { "type": "tip", "value": "Use DevTools to visualize stacking contexts. Reduce unnecessary contexts that complicate layering." },

        { "type": "text", "value": "isolation: isolate creates a new stacking context for a subtree, preventing interference from outside layers." },
        { "type": "code", "language": "css", "value": ".app{isolation:isolate}" },
        { "type": "tip", "value": "Create an isolated root when complex z-index layers risk bleeding or accidental overlaps." },

        { "type": "text", "value": "Use inset shorthands to place elements, and prefer logical offsets (inset-block-start) over top/left to align with writing modes." },
        { "type": "code", "language": "css", "value": ".tooltip{position:absolute;inset-block-end:100%;inset-inline-start:0;margin-block-end:.5rem}" },
        { "type": "tip", "value": "Prefer logical insets for internationalized UIs; they adapt to RTL and vertical writing directions." }
      ],
      "examples": [
        { "description": "Sticky header with blur effect.", "code": "header{position:sticky;top:0;backdrop-filter:blur(8px);z-index:10}" },
        { "description": "Badge anchored to a card corner.", "code": ".card{position:relative}.badge{position:absolute;inset-inline-end:.5rem;inset-block-start:.5rem}" },
        { "description": "Isolated app root for safer stacking.", "code": ".app{isolation:isolate}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Absolute positioning references:", "options": ["The viewport always", "The nearest positioned ancestor", "The document root"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Sticky becomes fixed when:", "options": ["The page loads", "A scroll threshold is crossed", "It has z-index"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Which can create a stacking context?", "options": ["opacity < 1", "margin", "padding"], "answer": 0 },
        { "id": "q4", "type": "single", "prompt": "isolation: isolate is used to:", "options": ["Reset styles", "Create a new stacking context", "Disable scrolling"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "Prefer which for i18n-aware offsets?", "options": ["top/left", "inset-block/inline", "z-index"], "answer": 1 }
      ]
    },
    {
      "id": "l9",
      "slug": "display-flow-and-bfc",
      "order": 9,
      "title": "Display, Normal Flow, and BFC",
      "minutes": 45,
      "summary": "Understand how elements flow, how BFC isolates formatting, and when to use flow-root/overflow.",
      "content": [
        { "type": "text", "value": "Normal flow is how elements naturally lay out: block-level elements stack vertically; inline elements flow within a line box. Changing display alters flow and participation." },
        { "type": "code", "language": "css", "value": ".inline{display:inline}\n.block{display:block}\n.inline-block{display:inline-block}" },
        { "type": "tip", "value": "Reach for Flex/Grid first for complex layout needs; use display-level tweaks for small adjustments." },

        { "type": "text", "value": "A Block Formatting Context (BFC) isolates layout. It can contain floats and prevent margin collapsing with its children." },
        { "type": "code", "language": "css", "value": ".bfc{overflow:auto} /* also creates BFC */\n/* or */\n.flow-root{display:flow-root}" },
        { "type": "tip", "value": "Use flow-root or overflow:auto to contain floats without extra wrapper markup." },

        { "type": "text", "value": "Floats still matter for text wrapping around media. Clear them with clear or avoid them with modern layout methods." },
        { "type": "code", "language": "css", "value": "img.thumb{float:inline-start;margin:0 1rem 1rem 0}\n.footer{clear:both}" },
        { "type": "tip", "value": "Prefer Flex/Grid for layout. Keep floats for legacy patterns or intentional text wrap effects." },

        { "type": "text", "value": "Overflow controls how content that exceeds a box is handled. It can also trigger a new block formatting context, affecting spacing and floats." },
        { "type": "code", "language": "css", "value": ".clip{overflow:hidden;border-radius:.75rem}" },
        { "type": "tip", "value": "Beware of clipping focus rings with overflow:hidden; add outline-offset or extra padding to keep focus visible." },

        { "type": "text", "value": "Inline formatting context differs from block: letter/word spacing, baseline alignment, and line-height govern inline layout—useful for precise typographic control." },
        { "type": "code", "language": "css", "value": ".label{letter-spacing:.01em;line-height:1.4}" },
        { "type": "tip", "value": "Use unitless line-height for scalable line boxes that inherit nicely across components." }
      ],
      "examples": [
        { "description": "Containing floats with flow-root.", "code": ".container{display:flow-root}" },
        { "description": "Legacy float-based media wrapping.", "code": "img.thumb{float:inline-start;margin:0 1rem 1rem 0}" },
        { "description": "Safe clipping with rounded corners.", "code": ".clip{overflow:hidden;border-radius:12px}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "A BFC can be created by:", "options": ["overflow:hidden", "display:inline", "position: static"], "answer": 0 },
        { "id": "q2", "type": "single", "prompt": "Normal flow stacks block elements:", "options": ["Horizontally", "Vertically", "In z-index order only"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Floats are best used today for:", "options": ["Site-wide layout", "Text wrap around media", "Z-index layering"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "overflow can also:", "options": ["Create a BFC", "Disable line height", "Set writing mode"], "answer": 0 },
        { "id": "q5", "type": "single", "prompt": "To avoid clipping focus with rounded corners:", "options": ["Use outline-offset/padding", "Remove outlines", "Use z-index"], "answer": 0 }
      ]
    },
    {
      "id": "l10",
      "slug": "grid-advanced-and-subgrid",
      "order": 10,
      "title": "Advanced CSS Grid and Subgrid",
      "minutes": 55,
      "summary": "Named lines/areas, auto-fit vs auto-fill, minmax patterns, alignment, and subgrid for nested layouts.",
      "content": [
        { "type": "text", "value": "Name lines and areas for readable placement. This scales better than magic numbers and helps you express intent clearly." },
        { "type": "code", "language": "css", "value": ".layout{display:grid;grid-template-columns:[full-start] 1fr [content-start] minmax(0,720px) [content-end] 1fr [full-end];}\n.main{grid-column:content-start/content-end}" },
        { "type": "tip", "value": "Use named lines for page scaffolds; it documents structure in the CSS itself." },

        { "type": "text", "value": "Define areas and place items by name. It boosts readability and makes responsive rearrangements straightforward." },
        { "type": "code", "language": "css", "value": ".page{display:grid;grid-template:\n  \"header header\" auto\n  \"sidebar main\" 1fr\n  \"footer footer\" auto / 280px 1fr}\n.header{grid-area:header}\n.sidebar{grid-area:sidebar}\n.main{grid-area:main}" },
        { "type": "tip", "value": "Areas are great for page-level layouts; combine with media/container queries for adaptations." },

        { "type": "text", "value": "auto-fit vs auto-fill: both repeat tracks to fill the row. auto-fit collapses empty tracks; auto-fill preserves them, which can affect alignment." },
        { "type": "code", "language": "css", "value": ".gallery{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem}\n.gallery-fill{display:grid;grid-template-columns:repeat(auto-fill, minmax(200px, 1fr));gap:1rem}" },
        { "type": "tip", "value": "Use auto-fit for compact grids that don’t show phantom columns; use auto-fill when you want consistent track patterns." },

        { "type": "text", "value": "Control alignment with align-items/justify-items at the container level, and align-self/justify-self per item. place-items is a convenient shorthand." },
        { "type": "code", "language": "css", "value": ".grid{display:grid;place-items:center}" },
        { "type": "tip", "value": "Place-items is perfect for centering content inside cards and tiles with minimal code." },

        { "type": "text", "value": "Subgrid allows nested grids to inherit track definitions from their parent, aligning columns or rows across components without duplication." },
        { "type": "code", "language": "css", "value": ".parent{display:grid;grid-template-columns:200px 1fr}\n.child{display:grid;grid-template-columns:subgrid;grid-column:1/-1}\n/* The child grid aligns to parent columns */" },
        { "type": "tip", "value": "Use subgrid to keep nested components aligned with the outer grid—especially useful for media lists and article layouts." }
      ],
      "examples": [
        { "description": "Named line scaffold for a centered content column.", "code": ".layout{display:grid;grid-template-columns:[full-start] 1fr [content-start] minmax(0,720px) [content-end] 1fr [full-end]}" },
        { "description": "Page areas for header/sidebar/content/footer.", "code": ".page{display:grid;grid-template:\"header header\" auto \"sidebar main\" 1fr \"footer footer\" auto / 280px 1fr}" },
        { "description": "Subgrid aligning child components.", "code": ".parent{display:grid;grid-template-columns:200px 1fr}.child{display:grid;grid-template-columns:subgrid;grid-column:1/-1}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Named lines and areas primarily improve:", "options": ["Rendering speed only", "Readability and intent", "Color accuracy"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "auto-fit will:", "options": ["Preserve empty tracks", "Collapse empty tracks", "Disable wrapping"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Subgrid lets children:", "options": ["Define unrelated tracks", "Inherit parent track sizing", "Ignore alignment rules"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "Which centers items in both axes?", "options": ["place-items:center", "align-content:space-between", "justify-items:start"], "answer": 0 },
        { "id": "q5", "type": "single", "prompt": "Grid areas are best used for:", "options": ["Inline text styling", "High-level page layouts", "Server configuration"], "answer": 1 }
      ]
    }
  ]
}