{
  "id": "course_css_mastery",
  "slug": "css-from-zero-to-pro",
  "title": "CSS From Zero to Pro",
  "subtitle": "Learn modern CSS from first principles to advanced, production-grade techniques.",
  "category": "Development",
  "level": "Beginner to Advanced",
  "hours": 28,
  "language": "en",
  "lastUpdated": "2025-08-20",
  "tags": ["CSS", "Selectors", "Cascade", "Box Model", "Typography", "Colors", "Flexbox", "Grid", "Responsive", "Media Queries", "Container Queries", "Variables", "Nesting", "Cascade Layers", ":has()", "Accessibility", "Performance", "Animations"],

  "hero": {
    "image": "images/img_1.jpg",
    "logo": "ayisha-logo-black.png",
    "ctaText": "Enroll Now",
    "ctaUrl": "enroll.html"
  },

  "overview": "Master CSS step by step. Start with how CSS works, selectors and the cascade, then build solid layouts with the box model, Flexbox and Grid. Learn modern typography and color techniques, responsive design with media and container queries, custom properties, nesting, cascade layers, advanced selectors like :has(), and production performance and accessibility best practices. You’ll finish with a solid mental model and a toolbox to ship scalable, maintainable CSS.",
  "content": "This course is project-oriented and explanation-heavy. Each lesson combines clear theory, small focused code snippets, and practical tips. Quizzes reinforce concepts from beginner to pro-level, ensuring you understand not just the how, but the why behind CSS decisions.",
  "prerequisites": ["Basic HTML knowledge (elements, attributes)", "Optional: basic understanding of the browser devtools"],
  "outcomes": [
    "Confidently write maintainable CSS with a strong grasp of the cascade, specificity and inheritance",
    "Build responsive layouts with Flexbox and Grid using modern units and techniques",
    "Craft accessible, readable interfaces with robust typography and color systems",
    "Adopt modern CSS features: custom properties, container queries, nesting, cascade layers, and :has()",
    "Optimize for performance and respect user preferences (reduced motion, dark mode)"
  ],

  "pricing": { "free": true, "price": 0, "currency": "EUR" },

  "instructor": {
    "name": "Ayisha Team",
    "avatar": "images/img_3.jpg",
    "bio": "Frontend engineers and accessibility advocates.",
    "links": [
      { "type": "site", "url": "https://example.com" }
    ]
  },

  "lessons": [
    {
      "id": "l0",
      "slug": "css-fundamentals",
      "order": 0,
      "title": "CSS Fundamentals",
      "minutes": 40,
      "summary": "What CSS is, how it connects to HTML, rule syntax, basic selectors, and a first look at the cascade.",
      "content": [
        { "type": "text", "value": "CSS (Cascading Style Sheets) controls presentation. Keep structure (HTML) separate from style (CSS) to improve reuse, accessibility, and maintainability. You usually link an external stylesheet from your HTML for caching and portability." },
        { "type": "code", "language": "html", "value": "<!-- index.html -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n<h1 class=\"title\">Hello CSS</h1>" },
        { "type": "tip", "value": "Prefer external stylesheets over inline styles to benefit from caching and clearer separation of concerns." },

        { "type": "text", "value": "The basic CSS rule shape is: selector { property: value; }. The selector targets elements; declarations set styles. Properties accept specific value types (keywords, lengths, colors)." },
        { "type": "code", "language": "css", "value": "/* styles.css */\nh1.title { color: #111827; font-size: 2rem; }" },
        { "type": "tip", "value": "Keep one declaration per line and group related rules to improve readability and diffs." },

        { "type": "text", "value": "Core selectors: type (h1), class (.btn), id (#header). Prefer classes for styling because they scale and avoid specificity traps that ids can create." },
        { "type": "code", "language": "css", "value": "button.btn { background: #111827; color: white; }\n#header { padding: 1rem; } /* Use sparingly */" },
        { "type": "tip", "value": "Prefer classes for styling. Use ids for unique anchors or JS hooks only when necessary." },

        { "type": "text", "value": "Attribute selectors and pseudo-classes target states and attributes. :hover and :focus-visible improve interaction and accessibility; prefer the latter for keyboard users." },
        { "type": "code", "language": "css", "value": "input[type=\"email\"] { border: 1px solid #cbd5e1; }\nbutton:hover { filter: brightness(1.05); }\nbutton:focus-visible { outline: 2px solid #2563eb; outline-offset: 2px; }" },
        { "type": "tip", "value": "Use :focus-visible (not :focus) so mouse users aren’t shown outlines unnecessarily, while keyboard users still get a visible focus indicator." },

        { "type": "text", "value": "The cascade decides which rule wins using: importance (!important), origin (user/author/UA), specificity, and source order. Understanding this prevents surprises." },
        { "type": "code", "language": "css", "value": "p { color: #111; }\n.article p { color: #334155; }\n.article p.important { color: #000 !important; }" },
        { "type": "tip", "value": "Avoid !important when possible. Favor good structure, lower specificity, and consistent layering to control priority." }
      ],
      "examples": [
        { "description": "Linking a stylesheet and styling a heading.", "code": "<link rel=\"stylesheet\" href=\"styles.css\">\n<h1 class=\"title\">Hello</h1>\n/* styles.css */\n.title{color:#111827;font-size:2rem}" },
        { "description": "Basic selectors: type, class, id.", "code": "h2{margin:0}\n.note{background:#fef3c7}\n#footer{padding:1rem}" },
        { "description": "Pseudo-classes for accessibility.", "code": "button:focus-visible{outline:2px solid #2563eb;outline-offset:2px}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "What does CSS primarily control?", "options": ["Data structure", "Presentation/visual style", "Server behavior"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which selector type is generally best for scalable styling?", "options": ["Type selector", "Class selector", "ID selector"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Which factor is evaluated last in the cascade if all else ties?", "options": ["Specificity", "Importance", "Source order"], "answer": 2 },
        { "id": "q4", "type": "single", "prompt": "Which pseudo-class should you prefer for keyboard focus states?", "options": [":focus", ":focus-visible", ":hover"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "Where should you typically put your CSS for maintainability?", "options": ["Inline styles", "External stylesheet", "In the HTML head as style blocks only"], "answer": 1 }
      ]
    },

    {
      "id": "l1",
      "slug": "box-model-and-units",
      "order": 1,
      "title": "Box Model and Units",
      "minutes": 45,
      "summary": "Understand content, padding, border, margin, box-sizing, margin collapsing, and modern units.",
      "content": [
        { "type": "text", "value": "Every element is a rectangular box. The box model consists of content, padding, border, and margin. Mastering it is key to predictable spacing and sizing." },
        { "type": "code", "language": "css", "value": ".card { padding: 1rem; border: 2px solid #eab308; margin: 1rem 0; }" },
        { "type": "tip", "value": "Sketch boxes when debugging layout. Visualizing padding/border/margin quickly reveals spacing issues." },

        { "type": "text", "value": "box-sizing: border-box makes width/height include padding and border, simplifying layout math and preventing overflow." },
        { "type": "code", "language": "css", "value": "*,*::before,*::after{box-sizing:border-box}\n.card{width:300px;padding:1rem;border:2px solid #eab308}" },
        { "type": "tip", "value": "Set border-box globally to reduce surprises and simplify components across the app." },

        { "type": "text", "value": "Adjacent vertical margins can collapse. This means the larger margin wins instead of adding up. Understanding this avoids unexpected gaps." },
        { "type": "code", "language": "css", "value": "h1{margin:1rem 0}\nh2{margin:.5rem 0} /* The vertical margin between may collapse to 1rem */" },
        { "type": "tip", "value": "Use padding on containers (not margin) to create internal spacing that doesn’t collapse with child margins." },

        { "type": "text", "value": "Use the right unit for the job. rem for global typography, em for component-relative spacing, % for fluid containers, ch for character-based measures, and modern viewport units like svh/lvh for mobile viewports." },
        { "type": "code", "language": "css", "value": "html{font-size:100%}\nh1{font-size:2.25rem}\n.btn{padding:.75em 1em}\n.hero{min-height:100svh}" },
        { "type": "tip", "value": "Prefer relative units (rem/em/%) for accessibility and responsiveness; avoid locking layouts with px everywhere." },

        { "type": "text", "value": "Logical properties adapt to writing modes and locales. Prefer inline/block logical margins/paddings over left/right/top/bottom for internationalized UIs." },
        { "type": "code", "language": "css", "value": ".panel{padding-block:1rem;padding-inline:1.25rem;margin-block:1rem;border-radius:12px}" },
        { "type": "tip", "value": "Use logical properties (margin-inline, padding-block, inset-inline) to support RTL and vertical writing modes effortlessly." }
      ],
      "examples": [
        { "description": "Global border-box reset.", "code": "*,*::before,*::after{box-sizing:border-box}" },
        { "description": "Character-based width for inputs.", "code": "input.code{width:24ch}" },
        { "description": "Logical properties for international UIs.", "code": ".card{padding-block:1rem;padding-inline:1rem}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "What does border-box change about width?", "options": ["Includes only content", "Includes content + padding + border", "Includes content + margin"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which margins can collapse?", "options": ["Horizontal margins", "Vertical adjacent margins", "Margins never collapse"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Which unit scales with the root font size?", "options": ["em", "rem", "px"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "What are logical properties useful for?", "options": ["Animations", "Internationalization and writing modes", "Z-index management"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "A good default for sizing and spacing is to:", "options": ["Use px for all dimensions", "Mix relative units wisely", "Avoid units and use auto everywhere"], "answer": 1 }
      ]
    },

    {
      "id": "l2",
      "slug": "typography-and-colors",
      "order": 2,
      "title": "Typography and Colors",
      "minutes": 45,
      "summary": "Readable type, scalable systems, and modern color spaces for accessible, beautiful interfaces.",
      "content": [
        { "type": "text", "value": "Typography communicates hierarchy and rhythm. Control font-family, size, weight, and line-height to establish clear visual structure and readability." },
        { "type": "code", "language": "css", "value": "body{font-family:system-ui,-apple-system,Segoe UI,Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif;line-height:1.6;color:#111827}" },
        { "type": "tip", "value": "Avoid long line lengths; aim for ~45–75 characters per line for running text." },

        { "type": "text", "value": "Scale type with rem for consistency and accessibility. Define a type scale and reuse it across components for predictable sizing." },
        { "type": "code", "language": "css", "value": "h1{font-size:2.5rem}\nh2{font-size:2rem}\nh3{font-size:1.5rem}\np{font-size:1rem}" },
        { "type": "tip", "value": "Set the root font-size to 100% so rem maps to user preferences and browser defaults." },

        { "type": "text", "value": "Modern color spaces like LCH/Lab offer perceptual uniformity, making gradients and mixed colors look more natural across ranges." },
        { "type": "code", "language": "css", "value": ".accent{color:lch(55% 50 30)}\n.badge{background:color-mix(in lch, orange 60%, white)}" },
        { "type": "tip", "value": "Use color-mix with care; test contrast and gamut clipping across devices." },

        { "type": "text", "value": "Variable fonts compress multiple weights/axes into a single file. They reduce requests and offer fine-grained control with font-variation-settings." },
        { "type": "code", "language": "css", "value": "@font-face{font-family:'InterVar';src:url(Inter.var.woff2) format('woff2');font-display:swap}\n.title{font-family:'InterVar',system-ui;font-variation-settings:'wght' 700}" },
        { "type": "tip", "value": "Always use font-display: swap for perceived performance; load text first, refine with the custom font when ready." },

        { "type": "text", "value": "Accessibility: ensure sufficient contrast and visible focus states. WCAG contrast recommendations help make text readable for more users." },
        { "type": "code", "language": "css", "value": "a{color:#2563eb}\na:focus-visible{outline:2px solid #2563eb;outline-offset:2px}" },
        { "type": "tip", "value": "Test contrast early and often. Don’t rely solely on color to convey meaning; use text or icons as well." }
      ],
      "examples": [
        { "description": "Fluid heading scale with rem.", "code": "h1{font-size:clamp(2rem,4vw,3rem)}" },
        { "description": "Tag with high-contrast badge.", "code": ".tag{background:#111827;color:#f8fafc;border-radius:.5rem;padding:.25em .5em}" },
        { "description": "Variable font in a hero title.", "code": ".hero-title{font-family:'InterVar';font-variation-settings:'wght' 650}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Which unit helps keep type consistent with user preferences?", "options": ["px", "rem", "vh"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Why use LCH/Lab color spaces?", "options": ["They are older and widely deprecated", "They’re perceptually more uniform", "They only work on dark mode"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "What’s a key benefit of variable fonts?", "options": ["Worse performance", "Multiple weights/axes in one file", "They remove the need for fallbacks"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "Minimum practice for readable links and buttons is to:", "options": ["Remove outlines", "Ensure visible focus and contrast", "Use only color without labels"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "font-variation-settings controls:", "options": ["OpenType features only", "Variable font axis values (e.g., weight)", "Line height only"], "answer": 1 }
      ]
    },

    {
      "id": "l3",
      "slug": "flexbox-and-grid-essentials",
      "order": 3,
      "title": "Flexbox and Grid Essentials",
      "minutes": 50,
      "summary": "Build robust one-dimensional and two-dimensional layouts with Flexbox and Grid.",
      "content": [
        { "type": "text", "value": "Flexbox is ideal for one-dimensional layouts (rows or columns). It distributes space along the main axis and supports alignment along the cross axis." },
        { "type": "code", "language": "css", "value": ".row{display:flex;gap:1rem}\n.row>div{flex:1}" },
        { "type": "tip", "value": "Start simple: display:flex on a container, then tune gap, alignment, and flex-basis." },

        { "type": "text", "value": "Control alignment with justify-content (main axis) and align-items (cross axis). Enable wrapping for responsive rows of cards." },
        { "type": "code", "language": "css", "value": ".row{display:flex;flex-wrap:wrap;gap:1rem;justify-content:space-between;align-items:stretch}\n.card{flex:1 1 240px}" },
        { "type": "tip", "value": "Avoid overusing order for semantic rearrangement; DOM order should reflect reading order." },

        { "type": "text", "value": "Grid handles two-dimensional layouts (rows and columns). Define tracks explicitly and place items by line, area, or auto-placement." },
        { "type": "code", "language": "css", "value": ".grid{display:grid;grid-template-columns:repeat(12,1fr);gap:1rem}\n.header{grid-column:1/-1}" },
        { "type": "tip", "value": "Use grid areas and minmax() to create resilient, fluid grids that adapt to container width." },

        { "type": "text", "value": "Create fluid columns with repeat(auto-fit, minmax()). auto-fit collapses empty tracks; minmax ensures a minimum width while staying flexible." },
        { "type": "code", "language": "css", "value": ".gallery{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1rem}" },
        { "type": "tip", "value": "Prefer intrinsic sizing over fixed breakpoints: let content define the minimums, grid fills the rest." },

        { "type": "text", "value": "When to choose Flexbox vs Grid: Flexbox for linear, content-driven distribution; Grid for structured two-axis layouts and page scaffolding." },
        { "type": "code", "language": "css", "value": "/* Flex for nav */\nnav ul{display:flex;gap:1rem}\n/* Grid for page */\n.page{display:grid;grid-template-columns:1fr minmax(0,720px) 1fr}" },
        { "type": "tip", "value": "Mix them: Grid for the macro layout, Flexbox for components within grid cells." }
      ],
      "examples": [
        { "description": "Responsive card row with wrapping.", "code": ".row{display:flex;flex-wrap:wrap;gap:1rem}.card{flex:1 1 240px}" },
        { "description": "12-column grid with full-width header.", "code": ".grid{display:grid;grid-template-columns:repeat(12,1fr)}.header{grid-column:1/-1}" },
        { "description": "Gallery with auto-fit/minmax.", "code": ".gallery{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1rem}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Flexbox is best for:", "options": ["Two-dimensional page grids", "One-dimensional row/column layouts", "SVG filters"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which property enables Grid?", "options": ["display: flex", "display: grid", "grid-auto-flow: column"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "What does minmax(200px, 1fr) do?", "options": ["Fixes items at 200px", "Allows items to be at least 200px and grow to 1fr", "Sets items to auto height"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "What does auto-fit do in repeat()?", "options": ["Hides grid areas", "Collapses empty tracks to fit available space", "Forces fixed columns"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "When should you prefer Grid over Flexbox?", "options": ["For axis-aligned two-dimensional layouts", "For simple horizontal nav bars", "Never"], "answer": 0 }
      ]
    },

    {
      "id": "l4",
      "slug": "responsive-design-media-and-container-queries",
      "order": 4,
      "title": "Responsive Design with Media and Container Queries",
      "minutes": 50,
      "summary": "Design mobile-first, use media queries for environment, and container queries for component-adaptive UI.",
      "content": [
        { "type": "text", "value": "Mobile-first means starting with a solid small-screen experience, then progressively enhancing layouts and features for larger screens." },
        { "type": "code", "language": "css", "value": ".container{padding:1rem}\n@media (min-width: 640px){.container{padding:1.5rem}}" },
        { "type": "tip", "value": "Avoid rigid desktop-first breakpoints. Let content and components guide where layout needs to adapt." },

        { "type": "text", "value": "Media queries condition styles on viewport or user preferences. Common queries target width, color scheme, and reduced motion preferences." },
        { "type": "code", "language": "css", "value": "@media (prefers-color-scheme: dark){:root{--bg:#0b0f19;--fg:#e5e7eb}body{background:var(--bg);color:var(--fg)}}" },
        { "type": "tip", "value": "Respect user preferences (dark mode, reduced motion). It improves comfort and accessibility." },

        { "type": "text", "value": "Container queries style components based on the size of their container, not the viewport. This enables truly reusable, context-aware components." },
        { "type": "code", "language": "css", "value": ".card-grid{container-type:inline-size}\n@container (min-width: 600px){.card{display:grid;grid-template-columns:1fr 2fr;gap:1rem}}" },
        { "type": "tip", "value": "Add container-type on the component’s parent you want to query. Then write @container rules like you do with @media." },

        { "type": "text", "value": "Use modern viewport units (svh/lvh) for mobile browsers with dynamic toolbars. This avoids layout jumps when the UI chrome shows/hides." },
        { "type": "code", "language": "css", "value": ".hero{min-height:100svh;display:grid;place-items:center}" },
        { "type": "tip", "value": "Prefer svh/lvh/dvh over vh when building full-height sections on mobile." },

        { "type": "text", "value": "Responsive images and fluid type improve performance and readability. Use image-set for DPR-aware images and clamp() for type scales." },
        { "type": "code", "language": "css", "value": ".cover{background-image:image-set(url(hero@1x.jpg) 1x, url(hero@2x.jpg) 2x)}\nh1{font-size:clamp(1.75rem,4vw,3rem)}" },
        { "type": "tip", "value": "Ship the smallest useful assets; let the browser pick higher-resolution resources only when needed." }
      ],
      "examples": [
        { "description": "Dark mode via prefers-color-scheme.", "code": "@media (prefers-color-scheme: dark){body{background:#0b0f19;color:#e5e7eb}}" },
        { "description": "Container query for a sidebar layout.", "code": ".sidebar{container-type:inline-size}\n@container (min-width: 500px){.sidebar{display:grid;grid-template-columns:240px 1fr;gap:1rem}}" },
        { "description": "Full-height hero that resists mobile toolbar jumps.", "code": ".hero{min-height:100svh}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Mobile-first means:", "options": ["Design for desktop first", "Start from small screens and progressively enhance", "Ignore tablets"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which query targets user color theme preference?", "options": ["prefers-reduced-motion", "prefers-color-scheme", "color-gamut"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Container queries depend on:", "options": ["Viewport size", "Container size", "User agent string"], "answer": 1 },
        { "id": "q4", "type": "single", "prompt": "svh/lvh units help with:", "options": ["Legacy IE support", "Dynamic mobile viewport heights", "Color contrast"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "For responsive images, image-set helps by:", "options": ["Choosing images by density/pixel ratio", "Inlining SVGs automatically", "Preloading all images"], "answer": 0 }
      ]
    },

    {
      "id": "l5",
      "slug": "modern-css-variables-nesting-layers-has-animations",
      "order": 5,
      "title": "Modern CSS: Variables, Nesting, Layers, :has(), and Animations",
      "minutes": 55,
      "summary": "Write scalable, maintainable CSS with custom properties, cascade layers, nesting, advanced selectors, and accessible motion.",
      "content": [
        { "type": "text", "value": "Custom properties (CSS variables) enable theming and reuse. They’re dynamic and participate in the cascade, so scope them wisely." },
        { "type": "code", "language": "css", "value": ":root{--brand:#eab308;--gap:1rem}\n.btn{background:var(--brand);padding:var(--gap)}\n.card{color:var(--fg,#111827)}" },
        { "type": "tip", "value": "Use variables for tokens (colors, spacing, radii). Provide fallbacks with var(--token, fallback)." },

        { "type": "text", "value": "Cascade layers (@layer) let you explicitly define priority buckets. They reduce specificity battles by making order intentional and predictable." },
        { "type": "code", "language": "css", "value": "@layer reset, base, components, utilities;\n@layer reset{*,*::before,*::after{box-sizing:border-box}}\n@layer base{body{font:16px/1.6 system-ui;color:#111827}}\n@layer components{.btn{padding:.75em 1em;border-radius:.5rem}}\n@layer utilities{.text-center{text-align:center}}" },
        { "type": "tip", "value": "Declare layers up front and group rules logically. Lower layers should set defaults; higher layers safely override." },

        { "type": "text", "value": "Nesting reduces repetition by letting you nest selectors inside a rule. Use it to keep related styles close and readable." },
        { "type": "code", "language": "css", "value": ".card{\n  padding:1rem;border-radius:.75rem;background:#fff\n  & .title{font-weight:700}\n  &:hover{box-shadow:0 6px 20px rgba(0,0,0,.08)}\n}" },
        { "type": "tip", "value": "Don’t over-nest. Keep selector depth shallow to avoid specificity creep and ensure maintainability." },

        { "type": "text", "value": ":is() and :where() simplify complex selectors; :has() is a parent-aware selector that unlocks patterns like styling a parent based on its children." },
        { "type": "code", "language": "css", "value": "article:is(.post,.news){padding:1rem}\nnav :where(a){text-decoration:none}\n.card:has(img){display:grid;grid-template-columns:120px 1fr;gap:1rem}" },
        { "type": "tip", "value": "Use :where() for zero-specificity grouping, :is() when you want specificity from the most specific selector inside." },

        { "type": "text", "value": "Transitions and keyframe animations should favor transform and opacity for performance. Respect prefers-reduced-motion to avoid discomfort." },
        { "type": "code", "language": "css", "value": ".btn{transition:transform .15s ease, background-color .2s ease}\n.btn:hover{transform:translateY(-2px)}\n@keyframes fadeIn{from{opacity:0}to{opacity:1}}\n@media (prefers-reduced-motion: reduce){*{animation:none;transition:none}}" },
        { "type": "tip", "value": "Animate only what’s necessary. Measure impact with DevTools; avoid layout-thrashing properties like width/left if possible." }
      ],
      "examples": [
        { "description": "Theme switch via custom properties.", "code": ":root{--bg:#ffffff;--fg:#111827}\n@media (prefers-color-scheme: dark){:root{--bg:#0b0f19;--fg:#e5e7eb}}\nbody{background:var(--bg);color:var(--fg)}" },
        { "description": "Layering utilities above components.", "code": "@layer components, utilities;@layer components{.btn{background:#111827;color:#fff}}@layer utilities{.text-center{text-align:center}}" },
        { "description": "Parent styling with :has()", "code": ".field:has(input:invalid){outline:2px solid #ef4444;outline-offset:2px}" }
      ],
      "quiz": [
        { "id": "q1", "type": "single", "prompt": "Custom properties are resolved:", "options": ["At build time", "At runtime and follow the cascade", "Only once per page"], "answer": 1 },
        { "id": "q2", "type": "single", "prompt": "Which feature organizes CSS into priority buckets?", "options": ["@supports", "@layer", "@font-face"], "answer": 1 },
        { "id": "q3", "type": "single", "prompt": "Which selector enables parent-aware styling?", "options": [":is()", ":where()", ":has()"], "answer": 2 },
        { "id": "q4", "type": "single", "prompt": "Which properties are cheaper to animate?", "options": ["width/left", "transform/opacity", "height/top"], "answer": 1 },
        { "id": "q5", "type": "single", "prompt": "Nesting should be used:", "options": ["Deeply for all selectors", "Sparingly with shallow depth", "Never in modern CSS"], "answer": 1 }
      ]
    }
  ]
}