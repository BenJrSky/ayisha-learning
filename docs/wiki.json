{
  "directive": "Ayisha.js Wiki Directives",
  "version": "1.0.4",
  "updatedAt": "2025-08-21T00:00:00.000Z",
  "directives": [
    {
      "directive": "#param",
      "type": "Component parameter (props-like)",
      "description": "Pass data/expressions from parent into a component via attributes starting with #. Inside the component, parameters are available as local variables with the same name.",
      "syntax": "#name=\"expression\"",
      "useFor": "Passing data into components without relying on global state.",
      "examples": [
        "<component @src=\"'components/course-card.html'\" #data=\"item\"></component>",
        "<component @src=\"'/components/sections/lesson-item.html'\" #slugcourse=\"_params[0]\" #datalesson=\"lesson\"></component>",
        "<component @src=\"'components/user-card.html'\" #title=\"user.name + ' (' + user.role + ')'\" ></component>"
      ],
      "tips": [
        "Values are evaluated in the parent context and then exposed in the child component context.",
        "Use descriptive names (#data, #item, #slugcourse, etc.) for clarity."
      ],
      "pairsWith": ["@component", "@scope"]
    },
    {
      "directive": "@animate",
      "type": "Animation",
      "description": "Adds a CSS class to trigger an animation/transition when the element is mounted.",
      "syntax": "@animate=\"animationClass\"",
      "useFor": "Visual polish, enter transitions, fade/slide effects.",
      "examples": [
        "<div @animate=\"fade-in\"></div>"
      ],
      "tips": [
        "Define the CSS animation using @keyframes in your stylesheet."
      ]
    },
    {
      "directive": "@attr",
      "type": "Dynamic attributes",
      "description": "Sets multiple HTML attributes from an object mapping.",
      "syntax": "@attr=\"{ src: url, alt: title }\"",
      "useFor": "Binding attributes such as src, alt, href, aria-*.",
      "examples": [
        "<img @attr=\"{ src: imageUrl, alt: imageAlt }\">"
      ],
      "tips": [
        "Also supports sub-directives per-attribute like @attr:src, @attr:alt."
      ]
    },
    {
      "directive": "@attr:src",
      "type": "Sub-directive",
      "description": "Sets the src attribute specifically (event-scoped variants supported where applicable).",
      "syntax": "@attr:src=\"expression\"",
      "subOf": "@attr",
      "examples": [
        "<img @attr:src=\"imageUrl\">"
      ]
    },
    {
      "directive": "@blur",
      "type": "Event handler",
      "description": "Executes code when the element loses focus.",
      "syntax": "@blur=\"expression\"",
      "useFor": "Hide help text, save data, capture final values.",
      "examples": [
        "<input @blur=\"helpVisible = false; lastValue = event.target.value\">"
      ]
    },
    {
      "directive": "@case",
      "type": "Switch case arm",
      "description": "Matches a specific value inside an @switch block.",
      "syntax": "@case=\"value\"",
      "useFor": "Branching UI inside @switch.",
      "examples": [
        "<div @switch=\"val\"><div @case=\"1\">One</div></div>"
      ],
      "pairsWith": ["@switch", "@default"]
    },
    {
      "directive": "@change",
      "type": "Event handler",
      "description": "Executes code on change (after blur or selection change).",
      "syntax": "@change=\"expression\"",
      "useFor": "Final validation, saving data.",
      "examples": [
        "<input @change=\"isValid = event.target.value.length > 3\">"
      ]
    },
    {
      "directive": "@class",
      "type": "Dynamic CSS classes",
      "description": "Applies CSS classes conditionally using an object or string expression. Supports event sub-directives (e.g., @class:focus).",
      "syntax": "@class=\"{ className: condition }\" or @class=\"'class-a class-b'\"",
      "useFor": "Conditional styling, interactive states.",
      "examples": [
        "<div @class=\"{ active: isActive, disabled: !enabled }\"></div>",
        "<div @class=\"theme\"></div>"
      ],
      "combinations": [
        "<input @class:focus=\"{ 'border-blue': true, shadow: true }\">"
      ]
    },
    {
      "directive": "@class:focus",
      "type": "Sub-directive",
      "description": "Applies CSS classes only when the element receives focus; removes them on blur.",
      "syntax": "@class:focus=\"{ className: condition }\"",
      "subOf": "@class",
      "event": "focus",
      "examples": [
        "<input @class:focus=\"{ 'border-blue': true, shadow: true }\">"
      ]
    },
    {
      "directive": "@click",
      "type": "Event handler",
      "description": "Executes JavaScript when the element is clicked. Has full access to reactive state and local scope.",
      "syntax": "@click=\"expression\"",
      "useFor": "Buttons, links, any clickable element.",
      "examples": [
        "<button @click=\"count++\">Increment</button>",
        "<a href=\"#\" @click=\"open = !open\">Toggle</a>"
      ],
      "tips": [
        "You can chain multiple statements with semicolons.",
        "Updates re-render automatically."
      ]
    },
    {
      "directive": "@component",
      "type": "Reusable component",
      "description": "Loads and renders external HTML as a component. Inherits parent state/context.",
      "syntax": "<component @src=\"pathOrExpression\"></component>",
      "useFor": "Modular UI, shared components, layouts.",
      "examples": [
        "<component @src=\"'components/sections/courses-section.html'\"></component>",
        "<component @page=\"enrol\" @src=\"'components/sections/enrol.html'\"></component>"
      ],
      "pairsWith": ["@src", "#param", "@scope"],
      "combinations": [
        "<li @for=\"it in items\" @key=\"it.id\">\n  <component @src=\"'components/item.html'\" @scope=\"item\" #data=\"it\"></component>\n</li>"
      ]
    },
    {
      "directive": "@date",
      "type": "Formatter",
      "description": "Formats an ISO date into a localized date/time string (e.g., \"August 1, 2025, 08:37\").",
      "syntax": "@date=\"dateExpr\"",
      "useFor": "Readable timestamps.",
      "examples": [
        "<li @date=\"createdAt\"></li>"
      ]
    },
    {
      "directive": "@dateonly",
      "type": "Formatter",
      "description": "Formats an ISO date showing only day, month, year.",
      "syntax": "@dateonly=\"dateExpr\"",
      "examples": [
        "<li @dateonly=\"createdAt\"></li>"
      ]
    },
    {
      "directive": "@default",
      "type": "Switch default arm",
      "description": "Fallback branch used when no @case matches inside @switch.",
      "syntax": "@default",
      "useFor": "Fallback UI in multi-state blocks.",
      "examples": [
        "<div @switch=\"val\"><div @default>Other</div></div>"
      ],
      "pairsWith": ["@switch", "@case"]
    },
    {
      "directive": "@do",
      "type": "Statement runner",
      "description": "Runs one or more expressions on the node. Combined with @watch it becomes a reactive effect that re-runs when watched values change.",
      "syntax": "@do=\"stmt1; stmt2\"",
      "useFor": "Update multiple variables, call functions, simple effects.",
      "examples": [
        "<button @do=\"log=(log||[]); log.push('clicked')\">Log action</button>",
        "<div @do=\"a=1; b=2\"></div>"
      ],
      "pairsWith": ["@watch", "@when"],
      "combinations": [
        "<span @when=\"isReady\" @do=\"start()\"></span>",
        "<div @watch=\"count => total = count * price\" @do=\"console.log('updated')\"></div>"
      ]
    },
    {
      "directive": "@error",
      "type": "Error target (fetch/json)",
      "description": "Variable where errors from @fetch/@json are stored; defaults to _error if not provided.",
      "syntax": "@error=\"errorVarName\"",
      "useFor": "Custom error binding for HTTP/JSON operations.",
      "examples": [
        "<div @fetch=\"url\" @result=\"data\" @error=\"apiError\"></div>"
      ],
      "pairsWith": ["@fetch", "@json", "@result", "@then", "@finally"]
    },
    {
      "directive": "@fetch",
      "type": "HTTP request",
      "description": "Performs an async HTTP request to the given URL/expression. Use @result to store parsed JSON; configure with @method/@headers/@payload; capture errors with @error.",
      "syntax": "@fetch=\"urlExpr\" [+ @method + @headers + @payload + @result + @error]",
      "useFor": "API calls, loading remote data, submitting forms.",
      "examples": [
        "<div @fetch=\"'/api/users/' + userId\" @result=\"user\"></div>",
        "<div @fetch=\"apiUrl\" @method=\"'POST'\" @payload=\"{ name }\" @headers=\"{ Authorization: 'Bearer ' + token }\" @result=\"res\" @error=\"err\"></div>"
      ],
      "tips": [
        "Use event sub-directives (e.g., @fetch:click) for user-triggered fetches.",
        "Supports string literals, interpolated strings, and expressions."
      ],
      "pairsWith": ["@result", "@method", "@headers", "@payload", "@error", "@then", "@finally"],
      "combinations": [
        "<button @fetch:click=\"'/api/data'\" @result=\"data\" @then=\"loaded=true\" @finally=\"loading=false\"></button>"
      ]
    },
    {
      "directive": "@fetch:click",
      "type": "Sub-directive (event)",
      "description": "Performs a fetch request only when the element is clicked.",
      "syntax": "@fetch:click=\"urlExpr\" + @result",
      "useFor": "On-demand loading, user-triggered API calls.",
      "subOf": "@fetch",
      "event": "click",
      "examples": [
        "<button @fetch:click=\"'/api/data'\" @result=\"data\">Load Data</button>"
      ]
    },
    {
      "directive": "@file",
      "type": "File input",
      "description": "Reads a selected file as base64 and stores it in the given state variable.",
      "syntax": "@file=\"stateVar\"",
      "examples": [
        "<input type=\"file\" @file=\"pic\">"
      ]
    },
    {
      "directive": "@files",
      "type": "Multiple file input",
      "description": "Reads multiple selected files as base64 and stores them in an array in the given state variable (appends if already present).",
      "syntax": "@files=\"stateVar\"",
      "examples": [
        "<input type=\"file\" multiple @files=\"gallery\">"
      ]
    },
    {
      "directive": "@filter",
      "type": "Array filter",
      "description": "Filters items using a predicate function. Use with @source and usually @result.",
      "syntax": "@filter=\"item => condition(item)\"",
      "useFor": "Filtering lists, search results.",
      "examples": [
        "<div @source=\"items\" @filter=\"item => item > 5\" @result=\"filtered\"></div>"
      ],
      "pairsWith": ["@source", "@result"]
    },
    {
      "directive": "@focus",
      "type": "Event handler",
      "description": "Executes code when the element receives focus.",
      "syntax": "@focus=\"expression\"",
      "examples": [
        "<input @focus=\"helpVisible = true; errors = ''\">"  
      ]
    },
    {
      "directive": "@for",
      "type": "Loop",
      "description": "Renders the element once per item in a list or object. Supports value-only or index/value tuple form.",
      "syntax": "@for=\"item in items\"  |  @for=\"index, item in items\"",
      "useFor": "Lists, tables, repeated UI.",
      "examples": [
        "<li @for=\"item in items\">{{item}}</li>",
        "<li @for=\"i, item in items\">#{{i}} - {{item}}</li>"
      ],
      "tips": [
        "Always pair with @key for better DOM updates.",
        "Objects are iterated via their values."
      ],
      "pairsWith": ["@key"]
    },
    {
      "directive": "@form",
      "type": "Form grouping & validity",
      "description": "Aggregates all child @model fields into state[formName] and exposes overall form validity in _validate[formName] (true/false/null).",
      "syntax": "@form=\"formName\"",
      "useFor": "Form state snapshot and derived overall validity.",
      "examples": [
        "<form @form=\"login\">\n  <input @model=\"email\" @validate=\"email\">\n  <input type=\"password\" @model=\"password\" @validate=\"required|min:6\">\n  <button @class=\"{ 'btn-primary': _validate.login, 'btn-secondary': !_validate.login }\">Login</button>\n</form>",
        "<form @form=\"profile\">\n  <input @model=\"name\" @validate=\"required|min:3\">\n</form>"
      ],
      "pairsWith": ["@model", "@validate"],
      "tips": [
        "_validate[formName] is true when all validated fields are true; false if any is false; null if none validated yet.",
        "state[formName] mirrors current values of child @model fields."
      ]
    },
    {
      "directive": "@go",
      "type": "SPA navigation (programmatic)",
      "description": "Navigates to a SPA route (updates _currentPage and _params, pushes history, and triggers re-render).",
      "syntax": "@go=\"'route'\" or @go=\"expression\"",
      "useFor": "Programmatic redirects after conditions, navigation buttons, wizards.",
      "examples": [
        "<button @go=\"'home'\">Home</button>",
        "<button @go=\"'course/' + id\">Open course</button>"
      ],
      "pairsWith": ["@when", "@wait"],
      "combinations": [
        "<span @when=\"loggedIn\" @go=\"'dashboard'\"></span>",
        "<span @when=\"isReady\" @wait=\"300\" @go=\"'next/step'\"></span>"
      ]
    },
    {
      "directive": "@headers",
      "type": "Fetch option",
      "description": "Custom headers object for @fetch requests.",
      "syntax": "@headers=\"{ Authorization: 'Bearer ...', 'X-Custom': 'v' }\"",
      "subOf": "@fetch",
      "examples": [
        "<div @fetch=\"url\" @method=\"'POST'\" @payload=\"data\" @headers=\"{ Authorization: 'Bearer ' + token }\" @result=\"res\"></div>"
      ]
    },
    {
      "directive": "@hide",
      "type": "Visibility toggle (inverse)",
      "description": "Hides the element (display:none) when the expression is truthy. The opposite of @show.",
      "syntax": "@hide=\"condition\"",
      "examples": [
        "<div @hide=\"loading\">Content</div>"
      ]
    },
    {
      "directive": "@hover",
      "type": "Event handler",
      "description": "Executes code on mouseover/mouseout (both enter and leave).",
      "syntax": "@hover=\"expression\"",
      "useFor": "Tooltips, previews, hover states.",
      "examples": [
        "<div @hover=\"showTooltip = !showTooltip\">Hover me</div>"
      ]
    },
    {
      "directive": "@if",
      "type": "Conditional rendering",
      "description": "Conditionally renders the element in the DOM. When false, the element is not present in the DOM at all.",
      "syntax": "@if=\"condition\"",
      "useFor": "Optional blocks, conditional components, error messages.",
      "examples": [
        "<div @if=\"count > 5\">Many items!</div>"
      ],
      "tips": [
        "Use @if to remove heavy content from DOM when hidden.",
        "Use @show/@hide when you want to keep DOM and only toggle visibility."
      ]
    },
    {
      "directive": "@initial",
      "type": "Reducer initial value",
      "description": "Sets the initial accumulator value for @reduce operations.",
      "syntax": "@initial=\"value\"",
      "useFor": "Starting accumulator values.",
      "examples": [
        "<div @source=\"items\" @reduce=\"(sum, item) => sum + item\" @initial=\"0\" @result=\"total\"></div>"
      ],
      "pairsWith": ["@reduce"]
    },
    {
      "directive": "@input",
      "type": "Event handler",
      "description": "Executes code on the input event (e.g., per keystroke).",
      "syntax": "@input=\"expression\"",
      "useFor": "Live search, counters, instant validation.",
      "examples": [
        "<input @input=\"search = event.target.value\">"
      ]
    },
    {
      "directive": "@json",
      "type": "Local JSON loader",
      "description": "Loads a local JSON file (GET) and stores it via @result; supports @then/@finally and @error variable.",
      "syntax": "@json=\"'path.json'\" + @result + [@then/@finally/@error]",
      "useFor": "Static/local data loading.",
      "examples": [
        "<span @json=\"'/courses/html-master.json'\" @result=\"htmlcourse\" @then=\"lessons=htmlcourse.lessons\" @finally=\"step=1\"></span>"
      ],
      "pairsWith": ["@result", "@then", "@finally", "@error"]
    },
    {
      "directive": "@key",
      "type": "Unique key",
      "description": "Provides a unique identifier for items rendered with @for to optimize DOM updates.",
      "syntax": "@key=\"uniqueValue\"",
      "useFor": "Lists and tables rendered with @for.",
      "examples": [
        "<li @for=\"item in items\" @key=\"item.id\">{{item.name}}</li>"
      ],
      "pairsWith": ["@for"]
    },
    {
      "directive": "@link",
      "type": "SPA link",
      "description": "Creates a navigation link that updates _currentPage without reload. Accepts literal route names, interpolated strings or expressions.",
      "syntax": "@link=\"routeNameOrExpression\"",
      "useFor": "SPA navigation.",
      "examples": [
        "<a @link=\"about\">About</a>",
        "<a @link=\"'course/' + courseId\">Open course</a>"
      ],
      "pairsWith": ["@page"],
      "tips": [
        "You can pass a literal route (e.g., about) or build it dynamically.",
        "On click it updates history, dispatches popstate and schedules a re-render."
      ]
    },
    {
      "directive": "@log",
      "type": "Directive logger",
      "description": "Shows a live, detailed log of directive execution, value changes, and timing on the current element.",
      "syntax": "@log",
      "useFor": "Understanding directive flow, debugging complex behavior.",
      "examples": [
        "<div @log></div>"
      ]
    },
    {
      "directive": "@map",
      "type": "Array map",
      "description": "Transforms each item using a mapping function. Use with @source and typically @result.",
      "syntax": "@map=\"item => transform(item)\"",
      "useFor": "Derived lists, value transformations.",
      "examples": [
        "<div @source=\"items\" @map=\"item => item * 2\" @result=\"double\"></div>"
      ],
      "pairsWith": ["@source", "@result"]
    },
    {
      "directive": "@method",
      "type": "Fetch option",
      "description": "Method for @fetch requests (e.g., 'GET', 'POST').",
      "syntax": "@method=\"'POST'\"",
      "subOf": "@fetch",
      "examples": [
        "<div @fetch=\"url\" @method=\"'POST'\" @payload=\"{foo:1}\" @result=\"res\"></div>"
      ]
    },
    {
      "directive": "@model",
      "type": "Two-way binding",
      "description": "Creates bidirectional data binding between a form control and a state property.",
      "syntax": "@model=\"stateProp\"",
      "useFor": "Text inputs, textareas, selects, checkboxes, radios.",
      "examples": [
        "<input @model=\"name\">",
        "<textarea @model=\"bio\"></textarea>",
        "<input type=\"checkbox\" @model=\"accepted\">"
      ],
      "tips": [
        "Works with any element that has a value-like property.",
        "Combine with @validate for live validation."
      ]
    },
    {
      "directive": "@not",
      "type": "Conditional rendering (negated)",
      "description": "Renders the element when the expression is falsy.",
      "syntax": "@not=\"condition\"",
      "examples": [
        "<div @not=\"isLoggedIn\">Please login</div>"
      ]
    },
    {
      "directive": "@page",
      "type": "SPA routing",
      "description": "Marks an element as a route target. Visible only when _currentPage matches its value.",
      "syntax": "@page=\"routeName\"",
      "useFor": "Single-page routing targets.",
      "examples": [
        "<div @page=\"home\">Home</div>",
        "<div @page=\"about\">About</div>"
      ],
      "pairsWith": ["@link"]
    },
    {
      "directive": "@payload",
      "type": "Fetch option",
      "description": "Body to send with @fetch (e.g., for POST/PUT).",
      "syntax": "@payload=\"objectExpr\"",
      "subOf": "@fetch",
      "examples": [
        "<div @fetch=\"url\" @method=\"'POST'\" @payload=\"{ name }\" @result=\"res\"></div>"
      ]
    },
    {
      "directive": "@prev",
      "type": "Navigation helper",
      "description": "Navigates back to the previous route/page (history back).",
      "syntax": "@prev",
      "useFor": "Back buttons, breadcrumb navigation.",
      "examples": [
        "<button @prev>Go Back</button>"
      ]
    },
    {
      "directive": "@reduce",
      "type": "Array reduce",
      "description": "Accumulates values into a single output using a reducer function. Use @initial for starting value.",
      "syntax": "@reduce=\"(acc, item) => acc + item\"",
      "useFor": "Summing, counting, aggregating data.",
      "examples": [
        "<div @source=\"items\" @reduce=\"(sum, item) => sum + item\" @initial=\"0\" @result=\"total\"></div>"
      ],
      "pairsWith": ["@source", "@initial", "@result"]
    },
    {
      "directive": "@result",
      "type": "Result target",
      "description": "Variable where results from @fetch/@json/@map/@filter/@reduce are stored.",
      "syntax": "@result=\"varName\"",
      "useFor": "Storing computed or fetched data.",
      "examples": [
        "<div @fetch=\"url\" @result=\"data\"></div>",
        "<div @source=\"items\" @map=\"item => item * 2\" @result=\"doubled\"></div>"
      ],
      "pairsWith": ["@fetch", "@json", "@map", "@filter", "@reduce"]
    },
    {
      "directive": "@scope",
      "type": "Scoped state",
      "description": "Creates a local state scope for the element and its children, isolating state from parent.",
      "syntax": "@scope=\"scopeName\"",
      "useFor": "Component isolation, local state management.",
      "examples": [
        "<div @scope=\"modal\"><!-- isolated state --></div>",
        "<component @src=\"'item.html'\" @scope=\"item\" #data=\"itemData\"></component>"
      ],
      "pairsWith": ["@component", "#param"]
    },
    {
      "directive": "@show",
      "type": "Visibility toggle",
      "description": "Shows/hides the element (display:none/block) based on the expression. Element stays in DOM.",
      "syntax": "@show=\"condition\"",
      "useFor": "Conditional visibility, toggles, modals.",
      "examples": [
        "<div @show=\"isVisible\">Content</div>",
        "<div @show=\"user && user.isAdmin\">Admin panel</div>"
      ],
      "tips": [
        "Use @show when you want to keep element in DOM but toggle visibility.",
        "Use @if when you want to completely remove element from DOM."
      ]
    },
    {
      "directive": "@source",
      "type": "Data source",
      "description": "Specifies the source array/object for @map/@filter/@reduce operations.",
      "syntax": "@source=\"arrayOrObject\"",
      "useFor": "Data transformation pipelines.",
      "examples": [
        "<div @source=\"items\" @filter=\"item => item > 5\" @result=\"filtered\"></div>",
        "<div @source=\"numbers\" @map=\"n => n * 2\" @result=\"doubled\"></div>"
      ],
      "pairsWith": ["@map", "@filter", "@reduce", "@result"]
    },
    {
      "directive": "@src",
      "type": "Component source",
      "description": "Path to external HTML file to load as a component.",
      "syntax": "@src=\"'path/to/component.html'\"",
      "useFor": "Loading external components.",
      "examples": [
        "<component @src=\"'components/header.html'\"></component>",
        "<component @src=\"'sections/' + sectionName + '.html'\"></component>"
      ],
      "pairsWith": ["@component", "#param", "@scope"]
    },
    {
      "directive": "@style",
      "type": "Dynamic inline styles",
      "description": "Applies inline CSS styles from an object expression. Supports event sub-directives.",
      "syntax": "@style=\"{ property: value, camelCase: value }\"",
      "useFor": "Dynamic styling, animations, responsive design.",
      "examples": [
        "<div @style=\"{ color: isActive ? 'red' : 'blue', fontSize: size + 'px' }\"></div>",
        "<div @style=\"{ backgroundColor: theme.primary }\"></div>"
      ],
      "tips": [
        "Use camelCase for CSS properties (backgroundColor, not background-color).",
        "Values are automatically converted to strings."
      ]
    },
    {
      "directive": "@switch",
      "type": "Switch statement",
      "description": "Creates a switch-like conditional block. Children use @case for specific values and @default for fallback.",
      "syntax": "@switch=\"expression\"",
      "useFor": "Multi-way branching, state machines.",
      "examples": [
        "<div @switch=\"status\">\n  <div @case=\"'loading'\">Loading...</div>\n  <div @case=\"'error'\">Error occurred</div>\n  <div @default>Ready</div>\n</div>"
      ],
      "pairsWith": ["@case", "@default"]
    },
    {
      "directive": "@text",
      "type": "Dynamic text content",
      "description": "Sets the text content of an element from an expression. Automatically escapes HTML.",
      "syntax": "@text=\"expression\"",
      "useFor": "Dynamic text, data display, computed values.",
      "examples": [
        "<span @text=\"user.name\"></span>",
        "<div @text=\"'Hello ' + name + '!'\"></div>",
        "<p @text=\"items.length + ' items'\"></p>"
      ],
      "tips": [
        "Content is automatically HTML-escaped for security.",
        "Use @html if you need to render HTML content (use with caution)."
      ]
    },
    {
      "directive": "@then",
      "type": "Success callback",
      "description": "Executes when @fetch/@json operations complete successfully.",
      "syntax": "@then=\"expression\"",
      "useFor": "Post-fetch processing, success handling.",
      "examples": [
        "<div @fetch=\"url\" @result=\"data\" @then=\"loaded = true\"></div>",
        "<div @json=\"'config.json'\" @result=\"config\" @then=\"initApp(config)\"></div>"
      ],
      "pairsWith": ["@fetch", "@json", "@finally", "@error"]
    },
    {
      "directive": "@validate",
      "type": "Form validation",
      "description": "Validates form field values using built-in or custom rules. Results stored in _validate object.",
      "syntax": "@validate=\"'rule1|rule2:param'\"",
      "useFor": "Form validation, input checking.",
      "examples": [
        "<input @model=\"email\" @validate=\"'required|email'\">",
        "<input @model=\"password\" @validate=\"'required|min:8|max:50'\">",
        "<input @model=\"age\" @validate=\"'required|numeric|min:18|max:120'\">"
      ],
      "pairsWith": ["@model", "@form"],
      "tips": [
        "Built-in rules: required, email, numeric, min:n, max:n, minlength:n, maxlength:n.",
        "Validation results available in _validate[fieldName] (true/false/null)."
      ]
    },
    {
      "directive": "@wait",
      "type": "Delay execution",
      "description": "Delays execution of paired directives by specified milliseconds.",
      "syntax": "@wait=\"milliseconds\"",
      "useFor": "Animations, delayed actions, transitions.",
      "examples": [
        "<div @wait=\"1000\" @go=\"'next-page'\"></div>",
        "<div @wait=\"500\" @do=\"showMessage = true\"></div>"
      ],
      "pairsWith": ["@go", "@do", "@when"]
    },
    {
      "directive": "@watch",
      "type": "Reactive watcher",
      "description": "Watches for changes in specified expressions and executes code when they change.",
      "syntax": "@watch=\"expr => action\"",
      "useFor": "Side effects, computed properties, reactive updates.",
      "examples": [
        "<div @watch=\"count => console.log('Count:', newVal)\"></div>",
        "<div @watch=\"search => results = items.filter(i => i.includes(newVal))\"></div>"
      ],
      "pairsWith": ["@do"],
      "tips": [
        "Watchers run immediately and on every change.",
        "Use arrow function syntax: watchedValue => action."
      ]
    },
    {
      "directive": "@when",
      "type": "Conditional execution",
      "description": "Executes paired directives only when the condition becomes true.",
      "syntax": "@when=\"condition\"",
      "useFor": "Conditional actions, guards, state-dependent behavior.",
      "examples": [
        "<div @when=\"isReady\" @go=\"'dashboard'\"></div>",
        "<div @when=\"user.isAdmin\" @do=\"loadAdminData()\"></div>"
      ],
      "pairsWith": ["@go", "@do", "@wait"]
    },
    {
      "directive": "state",
      "type": "Special variable",
      "description": "Global reactive state object that holds all reactive properties.",
      "examples": [
        "state.count",
        "state.user?.name"
      ],
      "tips": [
        "Mutating state triggers re-render of dependent parts."
      ]
    },
    {
      "directive": "_currentPage",
      "type": "Global variable",
      "description": "Contains the current active page/route in single-page applications. Automatically updated by @link and @go directives.",
      "useFor": "SPA routing, conditional page rendering, navigation state.",
      "examples": [
        "<div @show=\"_currentPage === 'home'\">Home content</div>",
        "<nav @class=\"{ active: _currentPage === 'about' }\">About</nav>",
        "<span @text=\"'Current page: ' + _currentPage\"></span>"
      ],
      "tips": [
        "Updated automatically when using @link or @go.",
        "Can be used in conditional rendering and styling.",
        "Reflects the current URL route in SPA applications."
      ],
      "pairsWith": ["@page", "@link", "@go"]
    },
    {
      "directive": "_validate",
      "type": "Global variable",
      "description": "Object containing validation results for all form fields. Each field's validation state is stored as true (valid), false (invalid), or null (not validated yet).",
      "useFor": "Form validation state, conditional styling, submit button states.",
      "examples": [
        "<button @show=\"_validate.email && _validate.password\">Submit</button>",
        "<div @class=\"{ 'error': _validate.username === false }\">Username field</div>",
        "<span @text=\"_validate.email ? 'Valid email' : 'Invalid email'\"></span>"
      ],
      "tips": [
        "Automatically populated by @validate directive.",
        "Use with @form for overall form validity checking.",
        "null means field hasn't been validated yet."
      ],
      "pairsWith": ["@validate", "@form", "@model"]
    },
    {
      "directive": "_version",
      "type": "Global variable",
      "description": "Contains the current version of Ayisha.js framework being used. Useful for debugging and compatibility checks.",
      "useFor": "Version display, compatibility checks, debugging information.",
      "examples": [
        "<footer @text=\"'Powered by Ayisha.js v' + _version\"></footer>",
        "<div @show=\"_version >= '1.0.0'\">New features available</div>",
        "<span @text=\"_version\"></span>"
      ],
      "tips": [
        "Read-only variable set by the framework.",
        "Useful for displaying framework version in UI.",
        "Can be used for feature detection based on version."
      ]
    },
    {
      "directive": "_locale",
      "type": "Global variable",
      "description": "Contains the current locale/language setting for the application. Used for internationalization and localization.",
      "useFor": "Internationalization, language switching, locale-specific formatting.",
      "examples": [
        "<div @text=\"_locale === 'en' ? 'Hello' : 'Hola'\"></div>",
        "<div @class=\"{ 'rtl': _locale === 'ar' }\">Content</div>",
        "<select @model=\"_locale\"><option value=\"en\">English</option></select>"
      ],
      "tips": [
        "Can be modified to change application language.",
        "Affects date/time formatting and text direction.",
        "Use for conditional content based on language."
      ],
      "pairsWith": ["@date", "@dateonly"]
    },
    {
      "directive": "_currentBreakpoint",
      "type": "Global variable",
      "description": "Contains the current responsive breakpoint (xs, sm, md, lg, xl) based on screen width. Automatically updated on window resize.",
      "useFor": "Responsive design, conditional layouts, mobile-specific behavior.",
      "examples": [
        "<div @show=\"_currentBreakpoint === 'xs'\">Mobile menu</div>",
        "<div @class=\"{ 'sidebar-collapsed': _currentBreakpoint === 'sm' }\">Sidebar</div>",
        "<span @text=\"'Current breakpoint: ' + _currentBreakpoint\"></span>"
      ],
      "tips": [
        "Automatically updated on window resize events.",
        "Breakpoints: xs (<576px), sm (576px+), md (768px+), lg (992px+), xl (1200px+).",
        "Use for responsive behavior without CSS media queries."
      ],
      "pairsWith": ["@class", "@show", "@hide"]
    },
    {
      "directive": "_screenSize",
      "type": "Global variable",
      "description": "Object containing current screen dimensions with width and height properties. Automatically updated on window resize.",
      "useFor": "Responsive calculations, dynamic sizing, viewport-dependent behavior.",
      "examples": [
        "<div @style=\"{ width: _screenSize.width / 2 + 'px' }\">Half width</div>",
        "<div @show=\"_screenSize.width > 1024\">Large screen content</div>",
        "<span @text=\"_screenSize.width + 'x' + _screenSize.height\"></span>"
      ],
      "tips": [
        "Contains { width: number, height: number } object.",
        "Updated automatically on window resize.",
        "Use for precise responsive calculations."
      ],
      "pairsWith": ["@style", "@class", "@show"]
    },
    {
      "directive": "_params",
      "type": "Global variable",
      "description": "Array containing URL parameters extracted from the current route. Used in single-page applications for dynamic routing.",
      "useFor": "Dynamic routing, URL parameter access, page-specific data loading.",
      "examples": [
        "<div @text=\"'User ID: ' + _params[0]\"></div>",
        "<div @fetch=\"'/api/users/' + _params[0]\" @result=\"user\"></div>",
        "<div @show=\"_params.length > 0\">Parameters available</div>"
      ],
      "tips": [
        "Automatically populated from URL segments.",
        "For route 'user/123/profile', _params = ['123', 'profile'].",
        "Use with @fetch for parameter-based data loading."
      ],
      "pairsWith": ["@page", "@link", "@go", "@fetch"]
    }
  ]
}